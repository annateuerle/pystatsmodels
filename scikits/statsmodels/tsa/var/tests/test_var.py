"""
Test VAR Model
"""

import os
import numpy as np

import scikits.statsmodels.api as sm
from scikits.statsmodels.tsa.var.alt import VAR2
from scikits.statsmodels.tsa.var.model import VAR

from numpy.testing import assert_almost_equal, assert_equal

DECIMAL_6 = 6
DECIMAL_5 = 5
DECIMAL_4 = 4
DECIMAL_3 = 3
DECIMAL_2 = 2

basepath = os.path.split(sm.__file__)[0]
resultspath = basepath + '/tsa/var/tests/results/'

class CheckVAR(object):

    def test_params(self):
        assert_almost_equal(self.res1.params, self.res2.params, DECIMAL_3)

    def test_neqs(self):
        assert_equal(self.res1.neqs, self.res2.neqs)

    def test_nobs(self):
        assert_equal(self.res1.avobs, self.res2.nobs)

    def test_df_eq(self):
        assert_equal(self.res1.df_eq, self.res2.df_eq)

    def test_rmse(self):
        results = self.res1.results
        for i in range(len(results)):
            assert_almost_equal(results[i].mse_resid**.5,
                    eval('self.res2.rmse_'+str(i+1)), DECIMAL_6)

    def test_rsquared(self):
        results = self.res1.results
        for i in range(len(results)):
            assert_almost_equal(results[i].rsquared,
                    eval('self.res2.rsquared_'+str(i+1)), DECIMAL_3)

    def test_llf(self):
        results = self.res1.results
        assert_almost_equal(self.res1.llf, self.res2.llf, DECIMAL_2)
        for i in range(len(results)):
            assert_almost_equal(results[i].llf,
                    eval('self.res2.llf_'+str(i+1)), DECIMAL_2)

    def test_aic(self):
        assert_almost_equal(self.res1.aic, self.res2.aic)

    def test_bic(self):
        assert_almost_equal(self.res1.bic, self.res2.bic)

    def test_hqic(self):
        assert_almost_equal(self.res1.hqic, self.res2.hqic)

    def test_fpe(self):
        assert_almost_equal(self.res1.fpe, self.res2.fpe)

    def test_detsig(self):
        assert_almost_equal(self.res1.detomega, self.res2.detsig)

    def test_bse(self):
        assert_almost_equal(self.res1.bse, self.res2.bse, DECIMAL_4)


class TestVARAlt(CheckVAR):
    def __init__(self):
        self.res1 = VAR2(endog=get_macrodata()).fit(maxlag=2)
        from results import results_var
        self.res2 = results_var.MacrodataResults()

def get_macrodata():
    data = sm.datasets.macrodata.load()
    data = data.data[['realinv','realgdp','realcons']].view((float,3))
    data = np.diff(np.log(data),axis=0)
    return data

class TestIRF(object):

    def test_plots(self):
        pass

def generate_var():
    from rpy2.robjects import r
    import pandas.rpy.common as prp
    r.source('tests/var.R')
    return prp.convert_robj(r['result'], use_pandas=False)

def write_generate_var():
    result = generate_var()
    np.savez('tests/results/vars_results.npz', **result)

class RResults(object):
    """
    Simple interface with results generated by "vars" package in R.
    """

    def __init__(self):
        data = np.load(resultspath + 'vars_results.npz')

        names = data['coefs'].dtype.names
        self.params = data['coefs'].view((float, len(names)))
        self.stderr = data['stderr'].view((float, len(names)))

        self.irf = data['irf']
        self.orth_irf = data['orthirf']

        self.nirfs = int(data['nirfs'][0])
        self.nobs = int(data['obs'][0])
        self.totobs = int(data['totobs'][0])

        self.aic = data['crit']['aic'][0]
        self.sic = data['crit']['sic'][0]
        self.hqic = data['crit']['hqic'][0]
        self.fpe = data['crit']['fpe'][0]

class TestVAR(object):
    def __init__(self):
        self.p = 2
        self.res = VAR(endog=get_macrodata()).fit(maxlags=self.p)
        self.ref = RResults()

    def test_params(self):
        assert_almost_equal(self.res1.params.T, self.res2.params, DECIMAL_3)

    def test_irfs(self):
        pass

    def test_neqs(self):
        assert_equal(self.res1.neqs, self.res2.neqs)

    def test_nobs(self):
        assert_equal(self.res1.avobs, self.res2.nobs)

    def test_df_eq(self):
        assert_equal(self.res1.df_eq, self.res2.df_eq)

    def test_aic(self):
        assert_almost_equal(self.res.aic, self.ref.aic)

    def test_bic(self):
        assert_almost_equal(self.res.bic, self.ref.bic)

    def test_hqic(self):
        assert_almost_equal(self.res.hqic, self.ref.hqic)

    def test_fpe(self):
        assert_almost_equal(self.res.fpe, self.ref.fpe)

    def test_detsig(self):
        assert_almost_equal(self.res1.detomega, self.res2.detsig)

    def test_bse(self):
        assert_almost_equal(self.res1.bse.T, self.res2.bse, DECIMAL_4)

    def test_info_crit(self):
        pass


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                   exit=False)
